# -*- coding: utf-8 -*-
"""Amnist_Deep_Learning_CNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qlqjochzH3fUV1OR-MzOa_fuHYnoWMoB
"""

import numpy as np
import matplotlib.pyplot as plt
import keras

from keras.datasets import mnist

from keras.models import Sequential
from keras.layers import Dense
from keras.optimizers import Adam
from keras.utils import to_categorical
import random

np.random.seed(0)

(X_train,y_train),(X_test,y_test)=mnist.load_data()

print(X_train.shape)
print(X_test.shape)
print(y_test.shape)

X_train

y_test

set(y_train)

plt.imshow(X_train[y_train==4][1000])   #1000--->Index Position
plt.axis('off')
plt.show()

plt.imshow(X_train[y_train==4][5841],cmap='gray')   #1000--->Index Position
plt.axis('off')
plt.show()

for i in range(0,10):
  print(i,':',len(X_train[y_train==i]))

for i in range(0,10):
   plt.imshow(X_train[y_train==i][np.random.randint(0,5000)],cmap='gray')
   plt.title(str(i))
   plt.axis('off')
   plt.show()

y_train=to_categorical(y_train,10)
y_test=to_categorical(y_test,10)

X_train=X_train.reshape(60000,28,28,1)
X_test=X_test.reshape(10000,28,28,1)

#Image Rescaling
X_train=X_train/255
X_test=X_test/255

#CNN Model
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten

def Lenet_Model():
  model=Sequential()

  #Covolutional Layer&ReLU layer
  model.add(Conv2D(30,(5,5),input_shape=(28,28,1),activation='relu'))

  #Max Pooling Layer
  model.add(MaxPooling2D(pool_size=(2,2)))

  #Flatten
  model.add(Flatten())
  #Hidden Layers
  model.add(Dense(200,activation='relu'))
  model.add(Dense(100,activation='relu'))
  #Output Layer
  model.add(Dense(10,activation='softmax'))

  model.compile(Adam(learning_rate=0.01),loss='categorical_crossentropy',metrics=['accuracy'])
  return model

model=Lenet_Model()
model.summary()

h=model.fit(X_train,y_train,validation_split=0.1,epochs=10,verbose=1)

plt.plot(h.history['accuracy'])
plt.plot(h.history['val_accuracy'])
plt.legend(['accuracy','val_accuracy'])
plt.title('Accuracy')
plt.xlabel('epoch')
plt.show()

plt.plot(h.history['loss'])
plt.plot(h.history['val_loss'])
plt.legend(['loss','val_loss'])
plt.title('Loss')
plt.xlabel('epoch')
plt.show()

